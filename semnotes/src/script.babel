class CommentBox extends React.Component {
	_postComments() {
		// Code pen doesn't allow access. 
	}
	
	_fetchComments() {
		jQuery.ajax({
			method: 'GET',
			url: 'https://codepen.io/pflanagan/pen/PNyJQp?editors=0010.js',
			success: (a) => {
				var data = JSON.parse(a);
				this.setState({ comments: data })
			},
			error: function(){
				console.log('ajax get error')
			}
		});
	}
	
	constructor() {
		super();
		this.state = {
			showComments: false,
			comments: []
		}
	}
	
	componentWillMount() {
		this._fetchComments();
		clearInterval(this._timer);
	}
	
	componentDidMount() {
		this._timer =	setInterval(() => this._fetchComments(), 5000);
		clearInterval(this._timer);
	}
	
	_getComments() {
		return this.state.comments.map((comment) => {
			return (
				<Comment author={comment.author} body={comment.body} key={comment.id} delete={this._handleDelete.bind(this)} />
			);
		}).reverse();
	}
	
	 _getAvatars() {
    return this.state.comments.map((comment) => {
			return (
				comment.author
			);
		});
  }
	
	_getCommentsTitle(commentCount) {
		if (commentCount === 0) {
			return 'No comments yet - ';
		} else if (commentCount === 1) {
			return '1 comment - ';
		} else {
			return (commentCount + ' comments - ')
		}
	}
	
	_getCommentsPopularity(commentCount) {
		if (commentCount === 0) {
			return (<Label type="danger" label="This thread is lame!" />)
		} else if (commentCount <= 10) {
			return (<Label type="warning" label="We beez the kneez!" />)
		} else {
			return (<Label type="success" label="This thread is dope yo!" />)
		} 
	}
	
	_handleClick() {
		this.setState({
			showComments: !this.state.showComments
		});
	}
	
	_addComment(author, body) {
		const comment = {
			id: this.state.comments.length + 1,
			author,
			body
		} 
		this.setState({ 
			showComments: true,
			comments: this.state.comments.concat([comment]) 
		});
	}
	
	_handleDelete(event){
		event.preventDefault();
		console.log('delete')
		//this.props.onDelete(this.props.comment);
	}
	
	render() {
		const comments = this._getComments() || [];
		const author = this._getAvatars() || [];
		let commentNodes;
		let commentBtn;
		let buttonText = "show comments";
		
		if (this.state.showComments) {
			commentNodes = <div className="comment-list"> {comments} </div>;
			buttonText = "hide comments"
		}
		if(comments.length > 0) {
			commentBtn = <Button class="link" label={buttonText} clickThis={this._handleClick.bind(this)} />
			
		} else {
			commentBtn = <Button class="disabled" disabled="true" icon="fa-comment-o" />
		}
		return (
      <div className="comment-box">
				<div>{author}</div>
				<h3>
					{this._getCommentsTitle(comments.length)}
					{this._getCommentsPopularity(comments.length)}
				</h3>
				
				<CommentForm addComment={this._addComment.bind(this)} />
				
				<div className="row">
					<div className="col-md-12">
						<div className="margin-md-bottom pull-right">
							{commentBtn}
						</div>
					</div>
				</div>
				
				{commentNodes}
				
      </div>
    );
  }
};

class Button extends React.Component {
	render() {
		let contents;
		if (this.props.icon) {
			contents = <i className={'fa ' + this.props.icon} aria-hidden="true"></i>
		} else {
			contents = this.props.label
		}
		return (
       <button 
				 className={'btn btn-sm btn-' + this.props.class} 
				 disabled={this.props.disabled ? 'disabled' : null}
				 onClick={this.props.clickThis}>
				{contents}
			</button>
    );
  }
};

class Label extends React.Component {
  render() {
		return (
       <span className={"label label-" + this.props.type}>{this.props.label}</span>
    );
  }
};

class Comment extends React.Component {
  render() {
		return (
      <div className="comment">
				<p className="comment-header">{this.props.author}</p>
				<p className="comment-body">{this.props.body}</p>
				<div className="comment-footer">
					<a href="#" className="comment-footer-delete" onClick={this.props.delete}>
						Delete Comment
					</a>
				</div>
      </div>
    );
  }
};

class CommentForm extends React.Component {
  render() {
		return (
      <form className="comment-form" onSubmit={this._handleSubmit.bind(this)}>
				<div className="form-group">
					<input className="form-control" placeholder="name:" ref={(input) => this._author = input} />
				</div>
				<div className="form-group">
					<textarea className="form-control" placeholder="Comment:" ref={(textarea) => this._body = textarea}></textarea>
				</div>
				<div className="form-group">
					<button className="btn btn-primary" type="submit">submit</button>
				</div>
      </form>
    );
  }
	_handleSubmit(event) {
		event.preventDefault();
		
		let author = this._author;
		let body = this._body;
		if (author.value && body.value) {
			this.props.addComment(author.value, body.value);
			author.value = '';
			body.value = '';
		} else {
			alert('Please fill out the form')
		}
	}
};

ReactDOM.render(
  <CommentBox />,
  document.getElementById('comment-box')
);

